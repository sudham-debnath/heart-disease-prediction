# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B475l27g2QEwVgw_KS3IP0wse_oMQ4vR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn as sk
import sklearn.metrics as skl
from sklearn.linear_model import LogisticRegression
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import classification_report
from sklearn.metrics import r2_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score

import statsmodels.api as sm
import statsmodels.formula.api as smf

df = pd.read_csv('/content/drive/MyDrive/Heart Disease Prediction/Heart Disease Prediction.csv')
df.head()

df.info()

null_columns=df.columns[df.isnull().any()]
df[null_columns].isnull().sum()

mod = smf.ols(formula='target ~ age+sex+cp+trestbps+chol+fbs+restecg+thalach+exang+oldpeak+slope+ca+thal',data=df)
res = mod.fit()
print(res.summary())

x = df[['age','sex','cp','trestbps','chol','fbs','restecg','thalach','exang','oldpeak','slope','ca','thal']]
y = df[['target']]
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, train_size =0.80, random_state=1)

from sklearn.linear_model import LinearRegression
model = LinearRegression()

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()

from sklearn.svm import SVC
model = SVC(kernel='linear', random_state=0)

from sklearn.neighbors import KNeighborsClassifier
model= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2 )

from sklearn.ensemble import AdaBoostClassifier
model = AdaBoostClassifier(n_estimators=50,learning_rate=1)

from sklearn.ensemble import GradientBoostingClassifier
model=GradientBoostingClassifier()

from xgboost import XGBClassifier
model= XGBClassifier()

from sklearn.ensemble import RandomForestClassifier
model= RandomForestClassifier(n_estimators= 10, criterion="entropy")

from sklearn.tree import DecisionTreeClassifier
model= DecisionTreeClassifier(criterion='entropy', random_state=0)

model.fit(x_train, y_train)
predictions = model.predict(x_test)
print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))
accuracy = model.score(x_test,y_test)
print('AccuracyII:',accuracy*100,'%')

print("Train set Accuracy: ", r2_score(y_train, model.predict(x_train)))
print("Test set Accuracy: ", r2_score(y_test, predictions))

new_observation = [[53,1,0,140,203,1,0,155,1,3.1,0,0,3]]
model.predict(new_observation)